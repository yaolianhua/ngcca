apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: #{[MONGO]}
    app.business.data/id: #{[ ID ]}
  name: #{[MONGO]}
  namespace: #{[NAMESPACE]}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: #{[MONGO]}
  strategy: {}
  template:
    metadata:
      labels:
        app: #{[MONGO]}
    spec:
      containers:
        - image: #{[MONGO_IMAGE]}
          imagePullPolicy: IfNotPresent
          name: #{[MONGO]}
          args: ["--dbpath","/data/db"]
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            requests:
              memory: "128Mi"
              cpu: "125m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          readinessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: #{[MONGO_ROOT_USERNAME]}
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: #{[MONGO_ROOT_PASSWORD]}
          volumeMounts:
            - name: mongo-data-dir
              mountPath: /data/db
      volumes:
        - name: mongo-data-dir
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: #{[MONGO]}
  name: #{[MONGO]}
  namespace: #{[NAMESPACE]}
spec:
  ports:
    - port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    app: #{[MONGO]}
  type: NodePort