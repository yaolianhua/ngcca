apiVersion: batch/v1
kind: Job
metadata:
  annotations: { }
  labels:
    k8s-app: #{[ LABEL_NAME ]}
    app.business.data/id: #{[ ID ]}
  name: #{[ JOB_NAME ]}
  namespace: #{[ NAMESPACE ]}
spec:
  activeDeadlineSeconds: 1800
  backoffLimit: 3
  template:
    metadata:
      annotations: { }
      labels:
        k8s-app: #{[ LABEL_NAME ]}
        app.business.data/id: #{[ ID ]}
    spec:
      containers:
        - args:
            - --destination=#{[ DESTINATION ]}
            - --skip-tls-verify=true
            - --insecure=true
            - --context=/workspace
            - --skip-tls-verify-registry=true
            - --skip-tls-verify-pull=true
            - --no-push=false
            - --insecure-pull=true
            - --push-retry=3
            - --dockerfile=/workspace/Dockerfile
            - --log-format=color
            - --log-timestamp=true
            - --force=false
            - --verbosity=info
            - --cache=true
            - --cache-run-layers=true
          image: #{[ KANIKO_IMAGE ]}
          imagePullPolicy: IfNotPresent
          name: #{[ KANIKO_CONTAINER_NAME ]}
          ports: [ ]
          volumeMounts:
            - mountPath: /kaniko/.docker
              name: docker-registry-secret
              readOnly: true
            - mountPath: /workspace
              name: workspace-volume
              readOnly: false
      dnsPolicy: ClusterFirst
      hostAliases: []
      imagePullSecrets: [ ]
      initContainers:
        - image: #{[ INIT_GIT_CONTAINER_IMAGE ]}
          imagePullPolicy: IfNotPresent
          name: #{[ INIT_GIT_CONTAINER_NAME ]}
          command:
          - 'git'
          - '-c'
          - 'http.sslVerify=false'
          - 'clone'
          - '--branch=#{[ GIT_BRANCH ]}'
          - '--depth=1'
          - '#{[ HTTP_GIT_URL ]}'
          - '/workspace'
          - '--verbose'
          volumeMounts:
          - name: workspace-volume
            mountPath: /workspace
        - image: #{[ INIT_ALPINE_CONTAINER_IMAGE ]}
          imagePullPolicy: IfNotPresent
          name: #{[ INIT_ALPINE_CONTAINER_NAME ]}
          command:
          - 'sh'
          - '-c'
          - "if [ -f Dockerfile ]; then echo 'Dockerfile exist. use default Dockerfile'; else echo -e '#{[ DOCKERFILE_ENCODED ]}' |base64 -d > /workspace/Dockerfile; fi"
          volumeMounts:
          - name: workspace-volume
            mountPath: /workspace
      restartPolicy: Never
      volumes:
        - name: docker-registry-secret
          secret:
            items:
              - key: .dockerconfigjson
                path: config.json
            optional: false
            secretName: #{[ SECRET_NAME ]}
        - name: workspace-volume
          emptyDir: { }