---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins-admin
rules:
  - apiGroups: [ "" ]
    resources: [ "*" ]
    verbs: [ "*" ]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-admin
  namespace: #{[ NAMESPACE ]}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins-admin
subjects:
  - kind: ServiceAccount
    name: jenkins-admin
    namespace: #{[ NAMESPACE ]}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #{[ JENKINS ]}
  namespace: #{[ NAMESPACE ]}
  labels:
    app.business.data/id: #{[ ID ]}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: #{[ JENKINS ]}
  template:
    metadata:
      labels:
        app: #{[ JENKINS ]}
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      serviceAccountName: jenkins-admin
      containers:
        - name: jenkins
          image: #{[ JENKINS_IMAGE ]}
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - name: httpport
              containerPort: 8080
            - name: jnlpport
              containerPort: 50000
          livenessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: #{[ JENKINS ]}
---
apiVersion: v1
kind: Service
metadata:
  name: #{[ JENKINS ]}
  namespace: #{[ NAMESPACE ]}
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: /
    prometheus.io/port: '8080'
spec:
  selector:
    app: #{[ JENKINS ]}
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: #{[ JENKINS ]}
  labels:
    type: local
spec:
  storageClassName: local-storage
  claimRef:
    name: #{[ JENKINS ]}
    namespace: #{[ NAMESPACE ]}
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  local:
    path: /mnt
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - #{[ STORAGE_NODE ]}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #{[ JENKINS ]}
  namespace: #{[ NAMESPACE ]}
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi