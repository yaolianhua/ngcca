apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: hotcloud
  name: hotcloud
  namespace: hotcloud-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: hotcloud
  name: hotcloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: hotcloud
    namespace: hotcloud-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: hotcloud
  name: hotcloud
  namespace: hotcloud-system
spec:
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    k8s-app: hotcloud
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-hotcloud$DOT_SUFFIX_DOMAIN
  namespace: hotcloud-system
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  rules:
    - host: api-hotcloud$DOT_SUFFIX_DOMAIN
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: hotcloud
                port:
                  number: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: hotcloud
  name: hotcloud
  namespace: hotcloud-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hotcloud
  template:
    metadata:
      labels:
        k8s-app: hotcloud
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
      containers:
        - image: $SERVER_IMAGE
          imagePullPolicy: IfNotPresent
          name: hotcloud
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /hotcloud/config
              name: hotcloud-config-volume
              readOnly: false
            - mountPath: /root/.kube/config
              name: kubeconfig
              readOnly: true
            - mountPath: /root/hotcloud
              name: hotcloud-data
              readOnly: false
      tolerations:
        - effect: NoSchedule
          operator: Exists
      serviceAccountName: hotcloud
      volumes:
        - configMap:
            name: hotcloud-config
            items:
              - key: config
                path: application.yml
          name: hotcloud-config-volume
        - hostPath:
            path: $KUBE_CONFIG_PATH
          name: kubeconfig
        - nfs:
            server: $NFS_SERVER
            path: $NFS_PATH
            readOnly: false
          name: hotcloud-data
---
apiVersion: v1
data:
  config: |
    kubernetes:
      in-cluster: true
      enable-workloads-watcher: true
    cache:
      type: $CACHE_MIDDLEWARE
      redis:
        host: $REDIS_HOST
        port: $REDIS_PORT
        password: $REDIS_PASSWORD
        database: $CACHE_REDIS_DATABASE
    db:
      type: $DB_MIDDLEWARE
      redis:
        database: $DB_REDIS_DATABASE
        host: $REDIS_HOST
        port: $REDIS_PORT
        password: $REDIS_PASSWORD
      mongodb:
          host: $MONGO_HOST
          username: $MONGO_USER
          password: $MONGO_PASSWORD
          port: $MONGO_PORT
          database: $MONGO_DATABASE
    message:
      type: $MESSAGE_MIDDLEWARE
      rabbitmq:
        host: $RABBITMQ_HOST
        username: $RABBITMQ_USER
        password: $RABBITMQ_PASSWORD
        port: $RABBITMQ_PORT
    minio:
      access-key: $MINIO_ACCESS_KEY
      secret-key: $MINIO_SECRET_KEY
      endpoint: $MINIO_ENDPOINT
    buildpack:
      registry:
        url: $REGISTRY_URL
        project: $REGISTRY_BUILD_NAMESPACE
        username: $REGISTRY_USERNAME
        password: $REGISTRY_PASSWORD
        kaniko-image-url: $KANIKO_IMAGE_URL
        git-init-container-image-url: $GIT_INIT_CONTAINER_IMAGE_URL
        alpine-init-container-image-url: $ALPINE_INIT_CONTAINER_IMAGE_URL
        java-base-image: $JAVA_BASE_IMAGE
    app:
      dot-suffix-domain: $DOT_SUFFIX_DOMAIN
kind: ConfigMap
metadata:
  name: hotcloud-config
  namespace: hotcloud-system
